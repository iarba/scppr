#version 330 core

struct material_t
{
  sampler2D diffuse;
  sampler2D specular;
  float shininess;
};

struct light_t
{
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float strength;
};

in vec3 f_pos;
in vec2 f_coord;
in vec3 f_norm;
in vec3 light_pos;

out vec4 color;

uniform material_t material;
uniform light_t light;

void main()
{
  vec3 norm = normalize(f_norm);
  vec3 light_dir = normalize(light.position - f_pos);
  vec3 view_dir = normalize(-f_pos);
  vec3 reflect_dir = reflect(-light_dir, norm);
  float distance = length(light.position - f_pos);
  float attenuation = max(1 - distance / light.strength, 0);

  float diffuse_strength = max(dot(norm, light_dir), 0.0);
  float specular_strength = 0.5 * pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);

  vec3 ambient_light  = attenuation * light.ambient  *                     vec3(texture(material.diffuse, f_coord));
  vec3 diffuse_light  = attenuation * light.diffuse  * diffuse_strength  * vec3(texture(material.diffuse, f_coord));
  vec3 specular_light = attenuation * light.specular * specular_strength * vec3(texture(material.specular, f_coord));

  color = vec4(ambient_light + diffuse_light + specular_light, 1);
}
